"""
Views for Payment Gateway app
"""

import hashlib
import uuid
import json
import logging
from datetime import datetime, timedelta
from django.shortcuts import render, redirect
from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.contrib.auth.decorators import login_required
from django.utils import timezone
from django.conf import settings
from .models import PaymentTransaction, PaymentCallback, UnityPaymentSession
from django.db import models

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è FreedomPay
MERCHANT_ID = "552170"
SECRET_KEY = "wUQ18x3bzP86MUzn"

# URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
SITE_URL = "http://89.39.95.190"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º IP –∞–¥—Ä–µ—Å


def log_message(msg):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"[{timestamp}] {msg}")
    print(f"[{timestamp}] {msg}")


def generate_signature(params_dict, script_name="payment.php"):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É FreedomPay
    """
    # 1. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    sorted_keys = sorted(params_dict.keys())
    
    # 2. –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    values = [str(params_dict[key]) for key in sorted_keys]
    
    # 3. –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Å–∫—Ä–∏–ø—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ
    values.insert(0, script_name)
    
    # 4. –î–æ–±–∞–≤–ª—è–µ–º SECRET_KEY –≤ –∫–æ–Ω–µ—Ü
    values.append(SECRET_KEY)
    
    # 5. –°–∫–ª–µ–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ ';'
    sign_string = ';'.join(values)
    
    # 6. MD5 —Ö–µ—à
    signature = hashlib.md5(sign_string.encode('utf-8')).hexdigest()
    
    return signature, sign_string


def verify_signature(params_dict, received_signature):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç FreedomPay"""
    try:
        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        params_copy = params_dict.copy()
        if 'pg_sig' in params_copy:
            del params_copy['pg_sig']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Å–∫—Ä–∏–ø—Ç–∞
        if 'pg_result' in params_copy:
            script_name = "result.php"
        else:
            script_name = "check.php"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å—å
        expected_signature, check_string = generate_signature(params_copy, script_name)
        
        log_message(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏:")
        log_message(f"   –ü–æ–ª—É—á–µ–Ω–∞: {received_signature}")
        log_message(f"   –û–∂–∏–¥–∞–µ–º: {expected_signature}")
        log_message(f"   –°—Ç—Ä–æ–∫–∞: {check_string}")
        
        return expected_signature == received_signature
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return False


@csrf_exempt
@require_http_methods(["POST"])
def unity_create_payment(request):
    """
    API endpoint –¥–ª—è Unity - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    """
    try:
        data = json.loads(request.body)
        unity_user_id = data.get('unity_user_id')
        amount = data.get('amount')
        description = data.get('description', 'Unity Payment')
        
        if not unity_user_id or not amount:
            return JsonResponse({
                'success': False,
                'error': 'Missing unity_user_id or amount'
            }, status=400)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–ª–∞—Ç–µ–∂–∞
        session_id = f"unity_{uuid.uuid4().hex[:16]}"
        session = UnityPaymentSession.objects.create(
            session_id=session_id,
            unity_user_id=unity_user_id,
            amount=amount,
            description=description,
            expires_at=timezone.now() + timedelta(hours=1)
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = PaymentTransaction.objects.create(
            order_id=f"unity_{uuid.uuid4().hex[:16]}",
            amount=amount,
            currency='UZS',
            description=description,
            unity_user_id=unity_user_id,
            unity_session_id=session_id,
            salt=uuid.uuid4().hex[:16],
            merchant_id=MERCHANT_ID
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        params = {
            "pg_merchant_id": MERCHANT_ID,
            "pg_amount": str(amount),
            "pg_currency": "UZS",
            "pg_description": description,
            "pg_salt": transaction.salt,
            "pg_language": "ru",
            "pg_order_id": transaction.order_id,
            "payment_origin": "unity_app",
            "pg_success_url": "http://89.39.95.190/payment-gateway/freedompay/success/",
            "pg_fail_url": "http://89.39.95.190/payment-gateway/freedompay/fail/"
        }
        
        signature, sign_string = generate_signature(params)
        transaction.signature = signature
        transaction.save()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        query_parts = []
        sorted_keys = sorted(params.keys())
        for key in sorted_keys:
            query_parts.append(f"{key}={params[key]}")
        query_parts.append(f"pg_sig={signature}")
        
        payment_url = f"https://api.freedompay.uz/payment.php?{'&'.join(query_parts)}"
        
        log_message(f"üéÆ Unity —Å–æ–∑–¥–∞–ª –ø–ª–∞—Ç–µ–∂: {transaction.order_id} –Ω–∞ {amount} UZS")
        
        return JsonResponse({
            'success': True,
            'order_id': transaction.order_id,
            'session_id': session_id,
            'payment_url': payment_url,
            'amount': amount,
            'currency': 'UZS'
        })
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ Unity: {e}")
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)


@csrf_exempt
@require_http_methods(["GET"])
def unity_check_payment_status(request):
    """
    API endpoint –¥–ª—è Unity - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    """
    try:
        order_id = request.GET.get('order_id')
        session_id = request.GET.get('session_id')
        
        if not order_id and not session_id:
            return JsonResponse({
                'success': False,
                'error': 'Missing order_id or session_id'
            }, status=400)
        
        # –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        if order_id:
            transaction = PaymentTransaction.objects.filter(order_id=order_id).first()
        else:
            transaction = PaymentTransaction.objects.filter(unity_session_id=session_id).first()
        
        if not transaction:
            return JsonResponse({
                'success': False,
                'error': 'Transaction not found'
            }, status=404)
        
        log_message(f"üéÆ Unity –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–ª—è {transaction.order_id}: {transaction.status}")
        
        return JsonResponse({
            'success': True,
            'order_id': transaction.order_id,
            'status': transaction.status,
            'amount': transaction.amount,
            'currency': transaction.currency,
            'created_at': transaction.created_at.isoformat(),
            'paid_at': transaction.paid_at.isoformat() if transaction.paid_at else None
        })
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Unity: {e}")
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)


@csrf_exempt
@require_http_methods(["POST"])
def freedompay_check(request):
    """
    Callback –æ—Ç FreedomPay - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞
    """
    log_message("‚ñ∂ CHECK –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –æ—Ç FreedomPay")
    log_message(f"üì® –î–∞–Ω–Ω—ã–µ: {dict(request.POST)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    pg_sig = request.POST.get('pg_sig')
    if pg_sig:
        if verify_signature(dict(request.POST), pg_sig):
            log_message("‚úÖ –ü–æ–¥–ø–∏—Å—å CHECK –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            log_message("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å—å CHECK")
            return HttpResponse("ERROR", status=400)
    else:
        log_message("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å CHECK –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    pg_order_id = request.POST.get('pg_order_id')
    pg_amount = request.POST.get('pg_amount')
    
    log_message(f"üÜî Order ID: {pg_order_id}")
    log_message(f"üí∞ Amount: {pg_amount} UZS")
    
    # –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    try:
        transaction = PaymentTransaction.objects.get(order_id=pg_order_id)
        
        # –°–æ–∑–¥–∞–µ–º callback –∑–∞–ø–∏—Å—å
        PaymentCallback.objects.create(
            transaction=transaction,
            callback_type='check',
            raw_data=dict(request.POST),
            processed=True
        )
        
        log_message(f"‚úÖ CHECK –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {pg_order_id}")
        
    except PaymentTransaction.DoesNotExist:
        log_message(f"‚ùå –ó–∞–∫–∞–∑ {pg_order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return HttpResponse("ERROR", status=400)
    
    return HttpResponse("OK", status=200)


@csrf_exempt
@require_http_methods(["POST"])
def freedompay_result(request):
    """
    Callback –æ—Ç FreedomPay - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞—Ç–µ–∂–∞
    """
    log_message("‚ñ∂ RESULT –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –æ—Ç FreedomPay")
    log_message(f"üì® –î–∞–Ω–Ω—ã–µ: {dict(request.POST)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    pg_sig = request.POST.get('pg_sig')
    if pg_sig:
        if verify_signature(dict(request.POST), pg_sig):
            log_message("‚úÖ –ü–æ–¥–ø–∏—Å—å RESULT –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            log_message("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å—å RESULT")
            return HttpResponse("ERROR", status=400)
    else:
        log_message("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å RESULT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞—Ç–µ–∂–∞
    pg_result = request.POST.get('pg_result')
    pg_payment_id = request.POST.get('pg_payment_id')
    pg_order_id = request.POST.get('pg_order_id')
    pg_amount = request.POST.get('pg_amount')
    
    log_message(f"üÜî Order ID: {pg_order_id}")
    log_message(f"üí≥ Payment ID: {pg_payment_id}")
    log_message(f"üí∞ Amount: {pg_amount} UZS")
    log_message(f"üìä Result: {pg_result}")
    
    try:
        transaction = PaymentTransaction.objects.get(order_id=pg_order_id)
        
        # –°–æ–∑–¥–∞–µ–º callback –∑–∞–ø–∏—Å—å
        PaymentCallback.objects.create(
            transaction=transaction,
            callback_type='result',
            raw_data=dict(request.POST),
            processed=True
        )
        
        if pg_result == "1":
            log_message(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω! Payment ID: {pg_payment_id}")
            transaction.mark_as_paid(pg_payment_id)
        else:
            log_message(f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª. –†–µ–∑—É–ª—å—Ç–∞—Ç: {pg_result}")
            transaction.mark_as_failed()
        
        log_message(f"‚úÖ RESULT –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {pg_order_id}")
        
    except PaymentTransaction.DoesNotExist:
        log_message(f"‚ùå –ó–∞–∫–∞–∑ {pg_order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return HttpResponse("ERROR", status=400)
    
    return HttpResponse("OK", status=200)


@csrf_exempt
@require_http_methods(["GET", "POST"])
def freedompay_success(request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    """
    if request.method == "POST":
        log_message("‚úÖ –ü–æ–ª—É—á–µ–Ω POST callback –Ω–∞ /success")
        log_message(f"üì® POST –¥–∞–Ω–Ω—ã–µ: {dict(request.POST)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π callback
        if request.POST:
            pg_order_id = request.POST.get('pg_order_id')
            if pg_order_id:
                try:
                    transaction = PaymentTransaction.objects.get(order_id=pg_order_id)
                    transaction.mark_as_paid()
                    
                    # –°–æ–∑–¥–∞–µ–º callback –∑–∞–ø–∏—Å—å
                    PaymentCallback.objects.create(
                        transaction=transaction,
                        callback_type='success',
                        raw_data=dict(request.POST),
                        processed=True
                    )
                    
                    log_message(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å 'success' –¥–ª—è Order ID: {pg_order_id}")
                except PaymentTransaction.DoesNotExist:
                    log_message(f"‚ùå –ó–∞–∫–∞–∑ {pg_order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return HttpResponse("OK", status=200)
    
    # GET –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã FreedomPay –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if request.GET:
        log_message("‚úÖ –ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –Ω–∞ /success —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        log_message(f"üì® GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {dict(request.GET)}")
        
        pg_order_id = request.GET.get('pg_order_id')
        if pg_order_id:
            try:
                transaction = PaymentTransaction.objects.get(order_id=pg_order_id)
                if transaction.status == 'pending':
                    transaction.mark_as_paid()
                    
                    # –°–æ–∑–¥–∞–µ–º callback –∑–∞–ø–∏—Å—å
                    PaymentCallback.objects.create(
                        transaction=transaction,
                        callback_type='success',
                        raw_data=dict(request.GET),
                        processed=True
                    )
                    
                    log_message(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å 'success' –¥–ª—è Order ID: {pg_order_id}")
                else:
                    log_message(f"‚ÑπÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {pg_order_id} —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {transaction.status}")
            except PaymentTransaction.DoesNotExist:
                log_message(f"‚ùå –ó–∞–∫–∞–∑ {pg_order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return render(request, 'payment_gateway/success.html')


@csrf_exempt
@require_http_methods(["GET", "POST"])
def freedompay_fail(request):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    """
    if request.method == "POST":
        log_message("‚ùå –ü–æ–ª—É—á–µ–Ω POST callback –Ω–∞ /fail")
        log_message(f"üì® POST –¥–∞–Ω–Ω—ã–µ: {dict(request.POST)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π callback
        if request.POST:
            pg_order_id = request.POST.get('pg_order_id')
            if pg_order_id:
                try:
                    transaction = PaymentTransaction.objects.get(order_id=pg_order_id)
                    transaction.mark_as_failed()
                    
                    # –°–æ–∑–¥–∞–µ–º callback –∑–∞–ø–∏—Å—å
                    PaymentCallback.objects.create(
                        transaction=transaction,
                        callback_type='fail',
                        raw_data=dict(request.POST),
                        processed=True
                    )
                    
                    log_message(f"‚ùå –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å 'failed' –¥–ª—è Order ID: {pg_order_id}")
                except PaymentTransaction.DoesNotExist:
                    log_message(f"‚ùå –ó–∞–∫–∞–∑ {pg_order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return HttpResponse("OK", status=200)
    
    # GET –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã FreedomPay –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if request.GET:
        log_message("‚ùå –ü–æ–ª—É—á–µ–Ω GET –∑–∞–ø—Ä–æ—Å –Ω–∞ /fail —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        log_message(f"üì® GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {dict(request.GET)}")
        
        pg_order_id = request.GET.get('pg_order_id')
        if pg_order_id:
            try:
                transaction = PaymentTransaction.objects.get(order_id=pg_order_id)
                if transaction.status == 'pending':
                    transaction.mark_as_failed()
                    
                    # –°–æ–∑–¥–∞–µ–º callback –∑–∞–ø–∏—Å—å
                    PaymentCallback.objects.create(
                        transaction=transaction,
                        callback_type='fail',
                        raw_data=dict(request.GET),
                        processed=True
                    )
                    
                    log_message(f"‚ùå –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å 'failed' –¥–ª—è Order ID: {pg_order_id}")
                else:
                    log_message(f"‚ÑπÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {pg_order_id} —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {transaction.status}")
            except PaymentTransaction.DoesNotExist:
                log_message(f"‚ùå –ó–∞–∫–∞–∑ {pg_order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return render(request, 'payment_gateway/fail.html')


@login_required
def payment_dashboard(request):
    """
    –î–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    """
    transactions = PaymentTransaction.objects.all().order_by('-created_at')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total': transactions.count(),
        'pending': transactions.filter(status='pending').count(),
        'success': transactions.filter(status='success').count(),
        'failed': transactions.filter(status='failed').count(),
        'total_amount': transactions.filter(status='success').aggregate(
            total=models.Sum('amount')
        )['total'] or 0
    }
    
    context = {
        'transactions': transactions,
        'stats': stats,
        'title': '–î–∞—à–±–æ—Ä–¥ –ø–ª–∞—Ç–µ–∂–µ–π'
    }
    
    return render(request, 'payment_gateway/dashboard.html', context)


@login_required
def transaction_detail(request, order_id):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    try:
        transaction = PaymentTransaction.objects.get(order_id=order_id)
        callbacks = transaction.callbacks.all().order_by('-created_at')
        
        context = {
            'transaction': transaction,
            'callbacks': callbacks,
            'title': f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {order_id}'
        }
        
        return render(request, 'payment_gateway/transaction_detail.html', context)
        
    except PaymentTransaction.DoesNotExist:
        return render(request, 'payment_gateway/error.html', {
            'error': '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
            'title': '–û—à–∏–±–∫–∞'
        })


def test_payment_form(request):
    """
    –¢–µ—Å—Ç–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    """
    if request.method == 'POST':
        amount = request.POST.get('amount', '1000')
        description = request.POST.get('description', 'Test Payment')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        transaction = PaymentTransaction.objects.create(
            order_id=f"test_{uuid.uuid4().hex[:16]}",
            amount=int(amount),
            currency='UZS',
            description=description,
            salt=uuid.uuid4().hex[:16],
            merchant_id=MERCHANT_ID
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        params = {
            "pg_merchant_id": MERCHANT_ID,
            "pg_amount": str(amount),
            "pg_currency": "UZS",
            "pg_description": description,
            "pg_salt": transaction.salt,
            "pg_language": "ru",
            "pg_order_id": transaction.order_id,
            "payment_origin": "test_form",
            "pg_success_url": "http://89.39.95.190/payment-gateway/freedompay/success/",
            "pg_fail_url": "http://89.39.95.190/payment-gateway/freedompay/fail/"
        }
        
        signature, sign_string = generate_signature(params)
        transaction.signature = signature
        transaction.save()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        query_parts = []
        sorted_keys = sorted(params.keys())
        for key in sorted_keys:
            query_parts.append(f"{key}={params[key]}")
        query_parts.append(f"pg_sig={signature}")
        
        payment_url = f"https://api.freedompay.uz/payment.php?{'&'.join(query_parts)}"
        
        return redirect(payment_url)
    
    return render(request, 'payment_gateway/test_form.html', {
        'title': '–¢–µ—Å—Ç–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –ø–ª–∞—Ç–µ–∂–∞'
    })


def api_documentation(request):
    """
    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–ª—è Unity —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    return render(request, 'payment_gateway/api_docs.html', {
        'title': 'API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
        'site_url': SITE_URL
    })
